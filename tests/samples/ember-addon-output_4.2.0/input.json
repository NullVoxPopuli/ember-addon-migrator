{
  ".editorconfig": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n\n[*.hbs]\ninsert_final_newline = false\n\n[*.{diff,md}]\ntrim_trailing_whitespace = false\n",
  ".ember-cli": "{\n  /**\n    Ember CLI sends analytics information by default. The data is completely\n    anonymous, but there are times when you might want to disable this behavior.\n\n    Setting `disableAnalytics` to true will prevent any data from being sent.\n  */\n  \"disableAnalytics\": false\n}\n",
  ".eslintignore": "# unconventional js\n/blueprints/*/files/\n/vendor/\n\n# compiled output\n/dist/\n/tmp/\n\n# dependencies\n/bower_components/\n/node_modules/\n\n# misc\n/coverage/\n!.*\n.*/\n.eslintcache\n\n# ember-try\n/.node_modules.ember-try/\n/bower.json.ember-try\n/npm-shrinkwrap.json.ember-try\n/package.json.ember-try\n/package-lock.json.ember-try\n/yarn.lock.ember-try\n",
  ".eslintrc.js": "'use strict';\n\nmodule.exports = {\n  root: true,\n  parser: 'babel-eslint',\n  parserOptions: {\n    ecmaVersion: 2018,\n    sourceType: 'module',\n    ecmaFeatures: {\n      legacyDecorators: true,\n    },\n  },\n  plugins: ['ember'],\n  extends: [\n    'eslint:recommended',\n    'plugin:ember/recommended',\n    'plugin:prettier/recommended',\n  ],\n  env: {\n    browser: true,\n  },\n  rules: {},\n  overrides: [\n    // node files\n    {\n      files: [\n        './.eslintrc.js',\n        './.prettierrc.js',\n        './.template-lintrc.js',\n        './ember-cli-build.js',\n        './index.js',\n        './testem.js',\n        './blueprints/*/index.js',\n        './config/**/*.js',\n        './tests/dummy/config/**/*.js',\n      ],\n      parserOptions: {\n        sourceType: 'script',\n      },\n      env: {\n        browser: false,\n        node: true,\n      },\n      plugins: ['node'],\n      extends: ['plugin:node/recommended'],\n    },\n    {\n      // test files\n      files: ['tests/**/*-test.{js,ts}'],\n      extends: ['plugin:qunit/recommended'],\n    },\n  ],\n};\n",
  ".github/workflows/ci.yml": "name: CI\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request: {}\n\nconcurrency:\n   group: ci-${{ github.head_ref || github.ref }}\n   cancel-in-progress: true\n\njobs:\n  test:\n    name: \"Tests\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: 12.x\n          cache: npm\n      - name: Install Dependencies\n        run: npm ci\n      - name: Lint\n        run: npm run lint\n      - name: Run Tests\n        run: npm run test:ember\n\n  floating:\n    name: \"Floating Dependencies\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: 12.x\n          cache: npm\n      - name: Install Dependencies\n        run: npm install --no-shrinkwrap\n      - name: Run Tests\n        run: npm run test:ember\n\n  try-scenarios:\n    name: ${{ matrix.try-scenario }}\n    runs-on: ubuntu-latest\n    needs: 'test'\n\n    strategy:\n      fail-fast: false\n      matrix:\n        try-scenario:\n          - ember-lts-3.24\n          - ember-lts-3.28\n          - ember-release\n          - ember-beta\n          - ember-canary\n          - ember-classic\n          - ember-default-with-jquery\n          - embroider-safe\n          - embroider-optimized\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: 12.x\n          cache: npm\n      - name: Install Dependencies\n        run: npm ci\n      - name: Run Tests\n        run: ./node_modules/.bin/ember try:one ${{ matrix.try-scenario }}\n",
  ".gitignore": "# See https://help.github.com/ignore-files/ for more about ignoring files.\n\n# compiled output\n/dist/\n/tmp/\n\n# dependencies\n/bower_components/\n/node_modules/\n\n# misc\n/.env*\n/.pnp*\n/.sass-cache\n/.eslintcache\n/connect.lock\n/coverage/\n/libpeerconnection.log\n/npm-debug.log*\n/testem.log\n/yarn-error.log\n\n# ember-try\n/.node_modules.ember-try/\n/bower.json.ember-try\n/npm-shrinkwrap.json.ember-try\n/package.json.ember-try\n/package-lock.json.ember-try\n/yarn.lock.ember-try\n",
  ".npmignore": "# compiled output\n/dist/\n/tmp/\n\n# dependencies\n/bower_components/\n\n# misc\n/.bowerrc\n/.editorconfig\n/.ember-cli\n/.env*\n/.eslintcache\n/.eslintignore\n/.eslintrc.js\n/.git/\n/.github/\n/.gitignore\n/.prettierignore\n/.prettierrc.js\n/.template-lintrc.js\n/.travis.yml\n/.watchmanconfig\n/bower.json\n/config/ember-try.js\n/CONTRIBUTING.md\n/ember-cli-build.js\n/testem.js\n/tests/\n/yarn-error.log\n/yarn.lock\n.gitkeep\n\n# ember-try\n/.node_modules.ember-try/\n/bower.json.ember-try\n/npm-shrinkwrap.json.ember-try\n/package.json.ember-try\n/package-lock.json.ember-try\n/yarn.lock.ember-try\n",
  ".prettierignore": "# unconventional js\n/blueprints/*/files/\n/vendor/\n\n# compiled output\n/dist/\n/tmp/\n\n# dependencies\n/bower_components/\n/node_modules/\n\n# misc\n/coverage/\n!.*\n.eslintcache\n.lint-todo/\n\n# ember-try\n/.node_modules.ember-try/\n/bower.json.ember-try\n/npm-shrinkwrap.json.ember-try\n/package.json.ember-try\n/package-lock.json.ember-try\n/yarn.lock.ember-try\n",
  ".prettierrc.js": "'use strict';\n\nmodule.exports = {\n  singleQuote: true,\n};\n",
  ".template-lintrc.js": "'use strict';\n\nmodule.exports = {\n  extends: 'recommended',\n};\n",
  ".watchmanconfig": "{\n  \"ignore_dirs\": [\"tmp\", \"dist\"]\n}\n",
  "CONTRIBUTING.md": "# How To Contribute\n\n## Installation\n\n* `git clone <repository-url>`\n* `cd my-addon`\n* `npm install`\n\n## Linting\n\n* `npm run lint`\n* `npm run lint:fix`\n\n## Running tests\n\n* `ember test` – Runs the test suite on the current Ember version\n* `ember test --server` – Runs the test suite in \"watch mode\"\n* `ember try:each` – Runs the test suite against multiple Ember versions\n\n## Running the dummy application\n\n* `ember serve`\n* Visit the dummy application at [http://localhost:4200](http://localhost:4200).\n\nFor more information on using ember-cli, visit [https://cli.emberjs.com/release/](https://cli.emberjs.com/release/).\n",
  "LICENSE.md": "The MIT License (MIT)\n\nCopyright (c) 2022\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "README.md": "my-addon\n==============================================================================\n\n[Short description of the addon.]\n\n\nCompatibility\n------------------------------------------------------------------------------\n\n* Ember.js v3.24 or above\n* Ember CLI v3.24 or above\n* Node.js v12 or above\n\n\nInstallation\n------------------------------------------------------------------------------\n\n```\nember install my-addon\n```\n\n\nUsage\n------------------------------------------------------------------------------\n\n[Longer description of how to use the addon in apps.]\n\n\nContributing\n------------------------------------------------------------------------------\n\nSee the [Contributing](CONTRIBUTING.md) guide for details.\n\n\nLicense\n------------------------------------------------------------------------------\n\nThis project is licensed under the [MIT License](LICENSE.md).\n",
  "config/ember-try.js": "'use strict';\n\nconst getChannelURL = require('ember-source-channel-url');\nconst { embroiderSafe, embroiderOptimized } = require('@embroider/test-setup');\n\nmodule.exports = async function () {\n  return {\n    scenarios: [\n      {\n        name: 'ember-lts-3.24',\n        npm: {\n          devDependencies: {\n            'ember-source': '~3.24.3',\n          },\n        },\n      },\n      {\n        name: 'ember-lts-3.28',\n        npm: {\n          devDependencies: {\n            'ember-source': '~3.28.0',\n          },\n        },\n      },\n      {\n        name: 'ember-release',\n        npm: {\n          devDependencies: {\n            'ember-source': await getChannelURL('release'),\n          },\n        },\n      },\n      {\n        name: 'ember-beta',\n        npm: {\n          devDependencies: {\n            'ember-source': await getChannelURL('beta'),\n          },\n        },\n      },\n      {\n        name: 'ember-canary',\n        npm: {\n          devDependencies: {\n            'ember-source': await getChannelURL('canary'),\n          },\n        },\n      },\n      {\n        name: 'ember-default-with-jquery',\n        env: {\n          EMBER_OPTIONAL_FEATURES: JSON.stringify({\n            'jquery-integration': true,\n          }),\n        },\n        npm: {\n          devDependencies: {\n            '@ember/jquery': '^1.1.0',\n          },\n        },\n      },\n      {\n        name: 'ember-classic',\n        env: {\n          EMBER_OPTIONAL_FEATURES: JSON.stringify({\n            'application-template-wrapper': true,\n            'default-async-observers': false,\n            'template-only-glimmer-components': false,\n          }),\n        },\n        npm: {\n          devDependencies: {\n            'ember-source': '~3.28.0',\n          },\n          ember: {\n            edition: 'classic',\n          },\n        },\n      },\n      embroiderSafe(),\n      embroiderOptimized(),\n    ],\n  };\n};\n",
  "config/environment.js": "'use strict';\n\nmodule.exports = function (/* environment, appConfig */) {\n  return {};\n};\n",
  "ember-cli-build.js": "'use strict';\n\nconst EmberAddon = require('ember-cli/lib/broccoli/ember-addon');\n\nmodule.exports = function (defaults) {\n  let app = new EmberAddon(defaults, {\n    // Add options here\n  });\n\n  /*\n    This build file specifies the options for the dummy test app of this\n    addon, located in `/tests/dummy`\n    This build file does *not* influence how the addon or the app using it\n    behave. You most likely want to be modifying `./index.js` or app's build file\n  */\n\n  const { maybeEmbroider } = require('@embroider/test-setup');\n  return maybeEmbroider(app, {\n    skipBabel: [\n      {\n        package: 'qunit',\n      },\n    ],\n  });\n};\n",
  "index.js": "'use strict';\n\nmodule.exports = {\n  name: require('./package').name,\n};\n",
  "package.json": "{\n  \"name\": \"my-addon\",\n  \"version\": \"0.0.0\",\n  \"description\": \"The default blueprint for ember-cli addons.\",\n  \"keywords\": [\n    \"ember-addon\"\n  ],\n  \"repository\": \"\",\n  \"license\": \"MIT\",\n  \"author\": \"\",\n  \"directories\": {\n    \"doc\": \"doc\",\n    \"test\": \"tests\"\n  },\n  \"scripts\": {\n    \"build\": \"ember build --environment=production\",\n    \"lint\": \"npm-run-all --aggregate-output --continue-on-error --parallel \\\"lint:!(fix)\\\"\",\n    \"lint:fix\": \"npm-run-all --aggregate-output --continue-on-error --parallel lint:*:fix\",\n    \"lint:hbs\": \"ember-template-lint .\",\n    \"lint:hbs:fix\": \"ember-template-lint . --fix\",\n    \"lint:js\": \"eslint . --cache\",\n    \"lint:js:fix\": \"eslint . --fix\",\n    \"start\": \"ember serve\",\n    \"test\": \"npm-run-all lint test:*\",\n    \"test:ember\": \"ember test\",\n    \"test:ember-compatibility\": \"ember try:each\"\n  },\n  \"dependencies\": {\n    \"ember-cli-babel\": \"^7.26.11\",\n    \"ember-cli-htmlbars\": \"^6.0.1\"\n  },\n  \"devDependencies\": {\n    \"@ember/optional-features\": \"^2.0.0\",\n    \"@ember/test-helpers\": \"^2.6.0\",\n    \"@embroider/test-setup\": \"^0.50.0\",\n    \"@glimmer/component\": \"^1.0.4\",\n    \"@glimmer/tracking\": \"^1.0.4\",\n    \"babel-eslint\": \"^10.1.0\",\n    \"broccoli-asset-rev\": \"^3.0.0\",\n    \"ember-auto-import\": \"^2.2.4\",\n    \"ember-cli\": \"~4.2.0-beta.1\",\n    \"ember-cli-dependency-checker\": \"^3.2.0\",\n    \"ember-cli-inject-live-reload\": \"^2.1.0\",\n    \"ember-cli-sri\": \"^2.1.1\",\n    \"ember-cli-terser\": \"^4.0.2\",\n    \"ember-disable-prototype-extensions\": \"^1.1.3\",\n    \"ember-export-application-global\": \"^2.0.1\",\n    \"ember-load-initializers\": \"^2.1.2\",\n    \"ember-page-title\": \"^7.0.0\",\n    \"ember-qunit\": \"^5.1.5\",\n    \"ember-resolver\": \"^8.0.3\",\n    \"ember-source\": \"~4.2.0-beta.1\",\n    \"ember-source-channel-url\": \"^3.0.0\",\n    \"ember-template-lint\": \"^4.0.0\",\n    \"ember-try\": \"^2.0.0\",\n    \"eslint\": \"^7.32.0\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-plugin-ember\": \"^10.5.8\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"eslint-plugin-qunit\": \"^7.2.0\",\n    \"loader.js\": \"^4.7.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"prettier\": \"^2.5.1\",\n    \"qunit\": \"^2.17.2\",\n    \"qunit-dom\": \"^2.0.0\",\n    \"webpack\": \"^5.65.0\"\n  },\n  \"engines\": {\n    \"node\": \"12.* || 14.* || >= 16\"\n  },\n  \"ember\": {\n    \"edition\": \"octane\"\n  },\n  \"ember-addon\": {\n    \"configPath\": \"tests/dummy/config\"\n  }\n}\n",
  "testem.js": "'use strict';\n\nmodule.exports = {\n  test_page: 'tests/index.html?hidepassed',\n  disable_watching: true,\n  launch_in_ci: ['Chrome'],\n  launch_in_dev: ['Chrome'],\n  browser_start_timeout: 120,\n  browser_args: {\n    Chrome: {\n      ci: [\n        // --no-sandbox is needed when running Chrome inside a container\n        process.env.CI ? '--no-sandbox' : null,\n        '--headless',\n        '--disable-dev-shm-usage',\n        '--disable-software-rasterizer',\n        '--mute-audio',\n        '--remote-debugging-port=0',\n        '--window-size=1440,900',\n      ].filter(Boolean),\n    },\n  },\n};\n",
  "tests/dummy/app/app.js": "import Application from '@ember/application';\nimport Resolver from 'ember-resolver';\nimport loadInitializers from 'ember-load-initializers';\nimport config from 'dummy/config/environment';\n\nexport default class App extends Application {\n  modulePrefix = config.modulePrefix;\n  podModulePrefix = config.podModulePrefix;\n  Resolver = Resolver;\n}\n\nloadInitializers(App, config.modulePrefix);\n",
  "tests/dummy/app/index.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>Dummy</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    {{content-for \"head\"}}\n\n    <link integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/vendor.css\">\n    <link integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/dummy.css\">\n\n    {{content-for \"head-footer\"}}\n  </head>\n  <body>\n    {{content-for \"body\"}}\n\n    <script src=\"{{rootURL}}assets/vendor.js\"></script>\n    <script src=\"{{rootURL}}assets/dummy.js\"></script>\n\n    {{content-for \"body-footer\"}}\n  </body>\n</html>\n",
  "tests/dummy/app/router.js": "import EmberRouter from '@ember/routing/router';\nimport config from 'dummy/config/environment';\n\nexport default class Router extends EmberRouter {\n  location = config.locationType;\n  rootURL = config.rootURL;\n}\n\nRouter.map(function () {});\n",
  "tests/dummy/app/styles/app.css": "",
  "tests/dummy/app/templates/application.hbs": "{{page-title \"Dummy\"}}\n\n<h2 id=\"title\">Welcome to Ember</h2>\n\n{{outlet}}",
  "tests/dummy/config/ember-cli-update.json": "{\n  \"schemaVersion\": \"1.0.0\",\n  \"packages\": [\n    {\n      \"name\": \"ember-cli\",\n      \"version\": \"4.2.0-beta.1\",\n      \"blueprints\": [\n        {\n          \"name\": \"addon\",\n          \"outputRepo\": \"https://github.com/ember-cli/ember-addon-output\",\n          \"codemodsSource\": \"ember-addon-codemods-manifest@1\",\n          \"isBaseBlueprint\": true,\n          \"options\": [\n            \"--ci-provider=github\"\n          ]\n        }\n      ]\n    }\n  ]\n}\n",
  "tests/dummy/config/environment.js": "'use strict';\n\nmodule.exports = function (environment) {\n  let ENV = {\n    modulePrefix: 'dummy',\n    environment,\n    rootURL: '/',\n    locationType: 'auto',\n    EmberENV: {\n      FEATURES: {\n        // Here you can enable experimental features on an ember canary build\n        // e.g. EMBER_NATIVE_DECORATOR_SUPPORT: true\n      },\n      EXTEND_PROTOTYPES: {\n        // Prevent Ember Data from overriding Date.parse.\n        Date: false,\n      },\n    },\n\n    APP: {\n      // Here you can pass flags/options to your application instance\n      // when it is created\n    },\n  };\n\n  if (environment === 'development') {\n    // ENV.APP.LOG_RESOLVER = true;\n    // ENV.APP.LOG_ACTIVE_GENERATION = true;\n    // ENV.APP.LOG_TRANSITIONS = true;\n    // ENV.APP.LOG_TRANSITIONS_INTERNAL = true;\n    // ENV.APP.LOG_VIEW_LOOKUPS = true;\n  }\n\n  if (environment === 'test') {\n    // Testem prefers this...\n    ENV.locationType = 'none';\n\n    // keep test console output quieter\n    ENV.APP.LOG_ACTIVE_GENERATION = false;\n    ENV.APP.LOG_VIEW_LOOKUPS = false;\n\n    ENV.APP.rootElement = '#ember-testing';\n    ENV.APP.autoboot = false;\n  }\n\n  if (environment === 'production') {\n    // here you can enable a production-specific feature\n  }\n\n  return ENV;\n};\n",
  "tests/dummy/config/optional-features.json": "{\n  \"application-template-wrapper\": false,\n  \"default-async-observers\": true,\n  \"jquery-integration\": false,\n  \"template-only-glimmer-components\": true\n}\n",
  "tests/dummy/config/targets.js": "'use strict';\n\nconst browsers = [\n  'last 1 Chrome versions',\n  'last 1 Firefox versions',\n  'last 1 Safari versions',\n];\n\nmodule.exports = {\n  browsers,\n};\n",
  "tests/dummy/public/robots.txt": "# http://www.robotstxt.org\nUser-agent: *\nDisallow:\n",
  "tests/index.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>Dummy Tests</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    {{content-for \"head\"}}\n    {{content-for \"test-head\"}}\n\n    <link rel=\"stylesheet\" href=\"{{rootURL}}assets/vendor.css\">\n    <link rel=\"stylesheet\" href=\"{{rootURL}}assets/dummy.css\">\n    <link rel=\"stylesheet\" href=\"{{rootURL}}assets/test-support.css\">\n\n    {{content-for \"head-footer\"}}\n    {{content-for \"test-head-footer\"}}\n  </head>\n  <body>\n    {{content-for \"body\"}}\n    {{content-for \"test-body\"}}\n\n    <div id=\"qunit\"></div>\n    <div id=\"qunit-fixture\">\n      <div id=\"ember-testing-container\">\n        <div id=\"ember-testing\"></div>\n      </div>\n    </div>\n\n    <script src=\"/testem.js\" integrity=\"\" data-embroider-ignore></script>\n    <script src=\"{{rootURL}}assets/vendor.js\"></script>\n    <script src=\"{{rootURL}}assets/test-support.js\"></script>\n    <script src=\"{{rootURL}}assets/dummy.js\"></script>\n    <script src=\"{{rootURL}}assets/tests.js\"></script>\n\n    {{content-for \"body-footer\"}}\n    {{content-for \"test-body-footer\"}}\n  </body>\n</html>\n",
  "tests/test-helper.js": "import Application from 'dummy/app';\nimport config from 'dummy/config/environment';\nimport * as QUnit from 'qunit';\nimport { setApplication } from '@ember/test-helpers';\nimport { setup } from 'qunit-dom';\nimport { start } from 'ember-qunit';\n\nsetApplication(Application.create(config.APP));\n\nsetup(QUnit.assert);\n\nstart();\n"
}